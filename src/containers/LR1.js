import React, { Component } from 'react';
var Dropzone = require('react-dropzone');
// import imageToAscii from 'image-to-ascii'

var Jimp = window.Jimp;

var KAGGLE_IMAGES = [
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,60,136,136,147,254,255,199,111,18,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,152,253,253,253,253,253,253,253,253,253,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,225,244,253,202,200,181,164,216,253,253,211,151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,149,78,3,0,0,0,20,134,253,253,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,206,253,253,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,253,253,253,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,99,234,253,253,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,142,220,219,236,253,253,240,121,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,253,253,253,253,235,233,253,253,185,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,150,194,194,194,53,40,97,253,253,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,253,253,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,237,253,253,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,253,253,253,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,12,120,193,253,253,214,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,153,253,253,253,253,212,30,0,0,0,0,0,0,0,0,0,0,0,0,0,33,136,70,6,0,27,67,186,253,253,253,253,234,31,0,0,0,0,0,0,0,0,0,0,0,0,0,26,231,253,253,191,183,223,253,253,253,253,172,216,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,215,253,253,253,253,253,253,253,253,253,47,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,87,223,253,253,253,244,152,223,223,109,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,50,176,148,78,16,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,24,24,97,253,253,253,253,255,180,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,186,252,252,253,252,252,252,252,253,252,227,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,155,252,252,252,253,252,252,227,79,222,252,252,129,0,0,0,0,0,0,0,0,0,0,0,0,0,85,233,252,252,252,252,253,252,252,202,11,180,252,252,119,0,0,0,0,0,0,0,0,0,0,0,0,43,240,253,252,252,252,252,253,252,252,244,126,201,252,252,150,0,0,0,0,0,0,0,0,0,0,0,7,212,253,255,253,253,253,232,221,42,0,104,253,255,253,205,21,0,0,0,0,0,0,0,0,0,0,0,25,223,252,253,252,252,214,18,0,0,34,215,252,253,223,56,0,0,0,0,0,0,0,0,0,0,0,0,0,99,246,253,252,252,77,0,7,70,203,252,252,173,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,253,252,252,236,103,160,252,252,218,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,252,252,252,252,253,231,106,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,253,253,253,253,255,159,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,118,252,240,244,252,253,231,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,164,246,253,187,50,99,246,253,252,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,232,252,203,58,0,0,135,253,252,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,246,252,200,11,0,0,0,116,253,252,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,162,253,192,11,0,0,0,0,179,255,253,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,178,252,119,0,5,47,47,140,244,253,252,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,186,252,227,184,191,252,252,252,252,253,240,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,144,227,252,252,253,252,252,252,252,98,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,137,242,253,231,137,137,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,255,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,250,253,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,248,253,167,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,247,253,208,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,207,253,235,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,209,253,253,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,254,253,238,170,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,210,254,253,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,209,253,254,240,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,253,253,254,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,206,254,254,198,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,253,253,196,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,203,253,248,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,188,253,245,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,253,253,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,240,253,195,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,220,253,253,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,253,253,253,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,251,253,250,131,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,218,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,30,137,137,192,86,72,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,86,250,254,254,254,254,217,246,151,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,179,254,254,254,254,254,254,254,254,254,231,54,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,254,254,254,254,254,254,254,254,254,254,254,254,104,0,0,0,0,0,0,0,0,0,0,0,0,0,61,191,254,254,254,254,254,109,83,199,254,254,254,254,243,85,0,0,0,0,0,0,0,0,0,0,0,0,172,254,254,254,202,147,147,45,0,11,29,200,254,254,254,171,0,0,0,0,0,0,0,0,0,0,0,1,174,254,254,89,67,0,0,0,0,0,0,128,252,254,254,212,76,0,0,0,0,0,0,0,0,0,0,47,254,254,254,29,0,0,0,0,0,0,0,0,83,254,254,254,153,0,0,0,0,0,0,0,0,0,0,80,254,254,240,24,0,0,0,0,0,0,0,0,25,240,254,254,153,0,0,0,0,0,0,0,0,0,0,64,254,254,186,7,0,0,0,0,0,0,0,0,0,166,254,254,224,12,0,0,0,0,0,0,0,0,14,232,254,254,254,29,0,0,0,0,0,0,0,0,0,75,254,254,254,17,0,0,0,0,0,0,0,0,18,254,254,254,254,29,0,0,0,0,0,0,0,0,0,48,254,254,254,17,0,0,0,0,0,0,0,0,2,163,254,254,254,29,0,0,0,0,0,0,0,0,0,48,254,254,254,17,0,0,0,0,0,0,0,0,0,94,254,254,254,200,12,0,0,0,0,0,0,0,16,209,254,254,150,1,0,0,0,0,0,0,0,0,0,15,206,254,254,254,202,66,0,0,0,0,0,21,161,254,254,245,31,0,0,0,0,0,0,0,0,0,0,0,60,212,254,254,254,194,48,48,34,41,48,209,254,254,254,171,0,0,0,0,0,0,0,0,0,0,0,0,0,86,243,254,254,254,254,254,233,243,254,254,254,254,254,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,254,254,254,254,254,254,254,254,254,254,239,86,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,182,254,254,254,254,254,254,254,254,243,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,76,146,254,255,254,255,146,19,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
];

function getImageFromKaggle(arr, callback){
    let new_img = new Jimp(28,28, 0xFFFFFFF, function (err, new_img){
        let i_max = 28;
        let j_max = 28;
        // console.log("NEW_WIDTH:" + width);
        // console.log("NEW_HEIGHT:" + height);
        // console.log("k:" + k);
        for(let i=0; i<i_max; i++){
            for (let j=0; j<j_max; j++){
                //
                new_img.setPixelColor(Jimp.rgbaToInt(0, 0, 0, arr[i*i_max + j]), j, i);

            }
        }
        new_img.getBase64( Jimp.MIME_PNG, callback );
    })
}

function getImageFromKaggleWithScale(arr, callback){
    let i_max = 28;
    let j_max = 28;
    let w = i_max;
    let h = j_max;
    let width = i_max;
    let height = j_max;
    let k = 1;
    for(let i = 1; height<250; i++){
        height=h*i;
        width=w*i;
        k = i;
    }
    let new_img = new Jimp(width,height, 0xFFFFFFF, function (err, new_img){
        let i_max = w;
        let j_max = h;
        for(let i=0; i<i_max; i++){
            for (let j=0; j<j_max; j++){
                let col = Jimp.rgbaToInt(0, 0, 0, arr[i*w + j]);
                let i_delt = i*k;
                let j_delt = j*k;
                for(let ind = i_delt; ind < i_delt+k; ind++) {
                    for (let jind = j_delt; jind < j_delt+k; jind++) {
                        new_img.setPixelColor(col, jind, ind);
                    }
                }


            }
        }
        new_img.getBase64( Jimp.MIME_PNG, callback );
    })
}

class MyComponent extends Component {
    constructor() {
        super();
        this.state = {
            pictures: [],
            showpictures: []
        };
        this.getImageFromKaggle = getImageFromKaggle.bind(this);
        this.getImageFromKaggleWithScale = getImageFromKaggleWithScale.bind(this);
    }
    onChange = (pictures) => this.setState({ pictures });
// The path can be either a local path or an url

    onDrop= function (acceptedFiles) {
        var new_files = [];
        //for (var file of acceptedFiles){
        //    let img = file.preview;
        //    Jimp.read(img, function (err, image) {
        //        let w = image.bitmap.width; // the width of the image
        //        let h = image.bitmap.height; // the height of the image
        //
        //        let width = image.bitmap.width; // the height of the image
        //        let height = image.bitmap.height; // the height of the image
        //
        //        let k = 1;
        //        for(let i = 1; height<250; i++){
        //            height=h*i;
        //            width=w*i;
        //            k = i;
        //        }
        //
        //        let new_img = new Jimp(width,height, 0xFFFFFFFF, function (err, new_img){
        //            let i_max = image.bitmap.width;
        //            let j_max = image.bitmap.height;
        //            // console.log("NEW_WIDTH:" + width);
        //            // console.log("NEW_HEIGHT:" + height);
        //            // console.log("k:" + k);
        //            for(let i=0; i<i_max; i++){
        //                for (let j=0; j<j_max; j++){
        //                    let col = image.getPixelColor(i, j);
        //                    console.log("COLOR:",col);
        //                        let i_delt = i*k;
        //                        let j_delt = j*k;
        //                            for(let ind = i_delt; ind < i_delt+k; ind++) {
        //                                for (let jind = j_delt; jind < j_delt+k; jind++) {
        //                                    new_img.setPixelColor(col, ind, jind);
        //                                }
        //                            }
        //
        //                    }
        //                }
        //            new_img.getBase64( Jimp.MIME_PNG, (err, data) =>{
        //                let arr = this.state.showpictures;
        //                arr.push(data);
        //                this.setState({showpictures:arr})
        //            });
        //        }.bind(this));
        //    }.bind(this));
        //}
        for (var elem of KAGGLE_IMAGES){
            console.log("KAGGLE:", elem);
            this.getImageFromKaggle(elem,(err, data) =>{
                console.log("KAGGLE ERROR:", err);
                let arr = this.state.showpictures;
                arr.push(data);
                this.setState({showpictures:arr})
            })
        }
        this.setState({
            pictures: acceptedFiles
        });
};


    render() {
        var pictures = this.state.pictures;
        for (var pic of pictures) {
            window.Jimp.read(pic.preview, function (err, image) {
                console.log(image);
                console.log(image.getPixelColor(0, 0));
                console.log(image.getPixelColor(1, 1));
            });
        }

        return (
            <div>
                <Dropzone onDrop={this.onDrop.bind(this)}>
                    <div>Try dropping some files here, or click to select files to upload.</div>
                </Dropzone>
                {this.state.pictures.length > 0 ? <div>
                    <h2>Uploading {this.state.pictures.length} files...</h2>
                    <div>{this.state.showpictures.map((file) => <img src={file} /> )}</div>
                </div> : null}
            </div>
        );
    }
}

export default MyComponent;